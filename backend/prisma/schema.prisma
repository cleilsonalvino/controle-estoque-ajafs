// ================================
// Configuração principal
// ================================
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ================================
// Usuários (opcional)
// ================================
model Usuario {
  id           String   @id @default(uuid())
  nome         String
  email        String   @unique
  senha        String
  papel        Papel    @default(USUARIO)
  ativo        Boolean  @default(true)
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
}

enum Papel {
  ADMINISTRADOR
  USUARIO
}

// ================================
// Produtos e Estoque (com Categoria)
// ================================
model Produto {
  id            String   @id @default(uuid())
  nome          String   @unique
  codigoBarras  String?  @unique
  descricao     String?
  precoVenda    Decimal  @default(0) @db.Decimal(14, 2)
  estoqueMinimo Decimal? @db.Decimal(14, 3)
  urlImage      String?
  categoriaId   String?
  fornecedorId  String?
  criadoEm      DateTime @default(now())
  atualizadoEm  DateTime @updatedAt

  categoria     CategoriaProduto? @relation(fields: [categoriaId], references: [id], onDelete: Cascade)
  fornecedor    Fornecedor?       @relation(fields: [fornecedorId], references: [id], onDelete: Cascade)
  movimentacoes Movimentacao[]
  itensVenda    ItemVenda[]

  lote Lote[]
}

model CategoriaProduto {
  id           String   @id @default(uuid())
  nome         String   @unique
  descricao    String?
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  produtos Produto[]
}

// ================================
// Movimentações de Estoque
// ================================
enum TipoMovimentacao {
  ENTRADA
  SAIDA
  AJUSTE
}

model Movimentacao {
  id         String           @id @default(uuid())
  produtoId  String
  tipo       TipoMovimentacao
  quantidade Decimal          @db.Decimal(14, 3)
  observacao String?
  criadoEm   DateTime         @default(now())

  produto Produto @relation(fields: [produtoId], references: [id], onDelete: Cascade)
}

// ================================
// Fornecedores
// ================================
model Fornecedor {
  id           String   @id @default(uuid())
  nome         String
  endereco     String?
  contato      String?
  email        String?  @unique
  telefone     String?
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  produtos Produto[]

  lote Lote[]
}

// ================================
// Vendas
// ================================
model Venda {
  id             String   @id @default(uuid())
  numero         String   @unique
  clienteId      String? // FK para Cliente
  vendedorId     String? // FK para Vendedor
  criadoEm       DateTime @default(now())
  atualizadoEm   DateTime @updatedAt
  total          Decimal  @db.Decimal(14, 2)
  status         String   @default("Concluída")
  tipoVenda      String   @default("Produto")
  formaPagamento String? // Pix, Cartão, Dinheiro
  desconto       Decimal? @db.Decimal(14, 2)
  lucroEstimado  Decimal? @db.Decimal(14, 2)
  observacoes    String?

  // Relações

  cliente     Cliente?      @relation(fields: [clienteId], references: [id])
  vendedor    Vendedor?     @relation(fields: [vendedorId], references: [id])
  itens       ItemVenda[]
  ItemServico ItemServico[]
}

// ================================
// Itens da Venda
// ================================
model ItemVenda {
  id            String  @id @default(uuid())
  vendaId       String
  produtoId     String
  quantidade    Decimal @db.Decimal(14, 3)
  precoUnitario Decimal @db.Decimal(14, 2)

  venda   Venda   @relation(fields: [vendaId], references: [id], onDelete: Cascade)
  produto Produto @relation(fields: [produtoId], references: [id], onDelete: Cascade)
}

// ================================
// Clientes
// ================================
model Cliente {
  id           String   @id @default(uuid())
  nome         String
  cpf          String?  @unique
  email        String?  @unique
  telefone     String?
  endereco     String?
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  vendas Venda[]
}

// ================================
// Vendedores
// ================================
model Vendedor {
  id           String   @id @default(uuid())
  nome         String
  email        String?  @unique
  meta         Decimal? @db.Decimal(14, 2)
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  vendas Venda[]
}

//======================
// Serviços
//======================

model Servico {
  id             String   @id @default(uuid())
  nome           String   @unique
  descricao      String?
  precoCusto     Decimal  @default(0) @db.Decimal(14, 2)
  precoVenda     Decimal  @default(0) @db.Decimal(14, 2)
  duracaoMinutos Int? // opcional, tempo estimado do serviço
  categoriaId    String?
  criadoEm       DateTime @default(now())
  atualizadoEm   DateTime @updatedAt

  categoria    CategoriaServico? @relation(fields: [categoriaId], references: [id], onDelete: Cascade)
  itensServico ItemServico[] // relação com a venda
}

model CategoriaServico {
  id           String   @id @default(uuid())
  nome         String   @unique
  descricao    String?
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  servicos Servico[]
}

model ItemServico {
  id            String  @id @default(uuid())
  vendaId       String
  servicoId     String
  quantidade    Int     @default(1)
  precoUnitario Decimal @db.Decimal(14, 2)

  venda   Venda   @relation(fields: [vendaId], references: [id], onDelete: Cascade)
  servico Servico @relation(fields: [servicoId], references: [id], onDelete: Cascade)
}

//======================
// Lotes
//======================

model Lote {
  id              String    @id @default(uuid())
  produtoId       String
  fornecedorId    String?
  precoCusto      Decimal   @db.Decimal(14, 2)
  quantidadeAtual Decimal   @db.Decimal(14, 3)
  dataCompra      DateTime  @default(now())
  validade        DateTime?
  criadoEm        DateTime  @default(now())
  atualizadoEm    DateTime  @updatedAt

  produto       Produto            @relation(fields: [produtoId], references: [id], onDelete: Cascade)
  fornecedor    Fornecedor?        @relation(fields: [fornecedorId], references: [id], onDelete: SetNull)
  movimentacoes MovimentacaoLote[]
}

model MovimentacaoLote {
  id         String           @id @default(uuid())
  loteId     String
  tipo       TipoMovimentacao
  quantidade Decimal          @db.Decimal(14, 3)
  observacao String?
  criadoEm   DateTime         @default(now())

  lote Lote @relation(fields: [loteId], references: [id], onDelete: Cascade)
}

//================
//Empresa
//================

model Empresa {
  id            String  @id @default(uuid())
  nome          String
  cnpj          String  @unique
  telefone      String
  email         String? @unique
  razaoSocial   String
  nomeFantasia  String
  inscEstadual  String
  inscMunicipal String
  cnae          String

  // Endereço diretamente na empresa
  cep         String
  estado      String
  cidade      String
  endereco    String
  numero      String
  complemento String?
  bairro      String

  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
}
