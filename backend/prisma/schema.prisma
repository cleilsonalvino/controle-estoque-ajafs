// ================================
// Configuração principal
// ================================
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ================================
// Usuários (opcional)
// ================================
model Usuario {
  id           String   @id @default(uuid())
  nome         String
  email        String   @unique
  senha        String
  papel        Papel    @default(USUARIO)
  ativo        Boolean  @default(true)
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
}

enum Papel {
  ADMINISTRADOR
  USUARIO
}

// ================================
// Produtos e Estoque (com Categoria)
// ================================
model Produto {
  id            String   @id @default(uuid())
  nome          String   @unique
  descricao     String?
  preco         Decimal  @db.Decimal(14, 2)
  estoqueAtual  Decimal  @default(0) @db.Decimal(14, 3)
  estoqueMinimo Decimal? @db.Decimal(14, 3)
  categoriaId   String? // opcional — produto pode não ter categoria
  fornecedorId  String?
  criadoEm      DateTime @default(now())
  atualizadoEm  DateTime @updatedAt

  categoria     CategoriaProduto? @relation(fields: [categoriaId], references: [id])
  fornecedor    Fornecedor?       @relation(fields: [fornecedorId], references: [id])
  movimentacoes Movimentacao[]
  itensVenda    ItemVenda[]
}

model CategoriaProduto {
  id        String  @id @default(uuid())
  nome      String  @unique
  descricao String?

  produtos Produto[]
}

// ================================
// Movimentações de Estoque
// ================================
enum TipoMovimentacao {
  ENTRADA
  SAIDA
  AJUSTE
}

model Movimentacao {
  id         String           @id @default(uuid())
  produtoId  String
  tipo       TipoMovimentacao
  quantidade Decimal          @db.Decimal(14, 3)
  observacao String?
  criadoEm   DateTime         @default(now())

  produto Produto @relation(fields: [produtoId], references: [id], onDelete: Cascade)
}

// ================================
// Fornecedores
// ================================
model Fornecedor {
  id           String   @id @default(uuid())
  nome         String
  localizacao  String?
  contato      String?
  email        String?  @unique
  telefone     String?
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  produtos Produto[]
}

// ================================
// Vendas
// ================================
model Venda {
  id              String   @id @default(uuid())
  numero          String   @unique
  clienteId       String?     // FK para Cliente
  vendedorId      String?     // FK para Vendedor
  criadoEm        DateTime @default(now())
  total           Decimal  @db.Decimal(14, 2)
  status          String   @default("Pendente")
  formaPagamento  String?  // Pix, Cartão, Dinheiro
  desconto        Decimal? @db.Decimal(14, 2)
  lucroEstimado   Decimal? @db.Decimal(14, 2)
  observacoes     String?

  // Relações
  cliente   Cliente?   @relation(fields: [clienteId], references: [id])
  vendedor  Vendedor?  @relation(fields: [vendedorId], references: [id])
  itens     ItemVenda[]
}

// ================================
// Itens da Venda
// ================================
model ItemVenda {
  id            String  @id @default(uuid())
  vendaId       String
  produtoId     String
  quantidade    Decimal @db.Decimal(14, 3)
  precoUnitario Decimal @db.Decimal(14, 2)

  venda   Venda   @relation(fields: [vendaId], references: [id])
  produto Produto @relation(fields: [produtoId], references: [id])
}

// ================================
// Clientes
// ================================
model Cliente {
  id        String   @id @default(uuid())
  nome      String
  email     String?  @unique
  telefone  String?
  endereco  String?
  criadoEm  DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  vendas Venda[]
}

// ================================
// Vendedores
// ================================
model Vendedor {
  id        String   @id @default(uuid())
  nome      String
  email     String?  @unique
  meta      Decimal? @db.Decimal(14, 2)
  criadoEm  DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  vendas Venda[]
}